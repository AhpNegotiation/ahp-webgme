/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Tue Oct 11 2016 21:03:46 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'loader/webgme-to-json',
    './ahp',
    'q'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    Loader,
    AHP,
    Q) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of analyze.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin analyze.
     * @constructor
     */
    var analyze = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    analyze.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    analyze.prototype = Object.create(PluginBase.prototype);
    analyze.prototype.constructor = analyze;

    analyze.prototype.example = function(stuff){
	var self = this;
    }

   analyze.prototype.notify = function(level, msg) {
	var self = this;
	var prefix = self.projectId + '::' + self.projectName + '::' + level + '::';
	if (level=='error')
	    self.logger.error(msg);
	else if (level=='debug')
	    self.logger.debug(msg);
	else if (level=='info')
	    self.logger.info(msg);
	else if (level=='warning')
	    self.logger.warn(msg);
	self.createMessage(self.activeNode, msg, level);
	self.sendNotification(prefix+msg);
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    analyze.prototype.main = function (callback) {
        var self = this,
            nodeObject;


        //self.logger.debug('This is a debug message.');
        //self.logger.info('This is an info message.');
        //self.logger.warn('This is a warning message.');
        //self.logger.error('This is an error message.');

        nodeObject = self.activeNode;
	
	Loader.loadModel(self.core,self.rootNode,nodeObject, true)
            .then(function (model) {
		self.model = model;
		console.log(self.model);
		self.processedModel = AHP.processJson(self.model);
		console.log(self.processedModel);
		self.Results = AHP.computeAHP(model);
		console.log(self.Results);
		self.Results.map(function(result){
		    self.blobClient.putFile(result.name + '.txt',JSON.stringify(result.weights,null,4))
			.then(function (hash) {
			    self.result.addArtifact(hash);
			});
		});

            })
	    .then(function(){
		self.result.setSuccess(true);
		callback(null, self.result);
	    })
            .catch(function (err) {
                // Result success is false at invocation.
                callback(err, self.result);
            });

    };

    return analyze;
});
